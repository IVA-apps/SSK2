{"applovin_helpers":{"sounds":[],"source":{"scripts":{"applovin_helpers.lua":"-- =============================================================\n-- Applovin Helpers Module - Generated by EAT Lean/Fat\n-- EAT Lean - https://gumroad.com/l/eatlean\n-- EAT Fat  - https://gumroad.com/l/EATFrameOneTime\n-- =============================================================\n-- applovin_helpers.lua\n-- =============================================================\n--[[\n\n   Note: The applovin_helpers module is a very thin layer on top of the normal applovin plugin, \n         but still nice as it is a ready-made place to organize your own code.\n\n   Includes these functions:\n\n   applovin_helpers.setID( os, id ) - Set an id manually (do before init if at all).\n   applovin_helpers.init( [delay] ) - Initialize ads with optional delay.\n   applovin_helpers.load( [ isIncentivized ] ] ) - Load a new [incentivized] ad.\n   applovin_helpers.isLoaded( [ isIncentivized ] ] ) - Check if an [incentivized] ad is loaded.\n   applovin_helpers.show( [ isIncentivized ] ] ) - Show an [incentivized] ad.\n   applovin_helpers.setUserDetails( params ] ) - Set user details to be passed to Applovin for server-side callbacks.\n\n--]]\n-- =============================================================\nlocal onSimulator    = ( system.getInfo( \"environment\" ) == \"simulator\" )\nlocal oniOS          = ( system.getInfo(\"platformName\") == \"iPhone OS\" )\nlocal onAndroid      = ( system.getInfo(\"platformName\") == \"Android\" )\nlocal onWinPhone     = ( system.getInfo(\"platformName\") == \"WinPhone\" )\nlocal onOSX          = ( system.getInfo(\"platformName\") == \"Mac OS X\" )\nlocal onAppleTV      = ( system.getInfo(\"platformName\") == \"tvOS\" )\nlocal onAndroidTV    = ( (system.getInfo(\"androidDisplayDensityName\") == \"tvdpi\") or\n                         (tostring(system.getInfo(\"androidDisplayApproximateDpi\")) == \"213\" ) )\nlocal onWin          = ( system.getInfo(\"platformName\") == \"Win\" )\nlocal onNook         = ( system.getInfo(\"targetAppStore\") == \"nook\" )\nlocal onAmazon       = ( system.getInfo(\"targetAppStore\") == \"amazon\" or\n                         ( string.find( system.getInfo(\"model\"), \"Fire\" ) ~= nil ) )\nlocal onDesktop      = ( ( onOSX or onWin ) and not onSimulator )\nlocal onDevice       = ( onAndroid or oniOS or onAppleTVOS or onAndroidTV  )\n-- =============================================================\n-- =============================================================\nlocal applovin = require( \"plugin.applovin\" )\n\nlocal applovin_helpers = {}\n\n-- ==\n--    Table of ids, separated by OS and type (banner or interstitial)\n-- ==\nlocal ids = \n{ \n   android   = ANDROID_ID,\n   ios       = IOS_ID,\n   apple_tv  = APPLE_TV_ID\n}\n\n-- ==\n--    Example Applovin Listener \n-- ==\nlocal function listener( event ) \n   -- Extract base set of useful event details:\n   local isError  = (event.isError == nil) and false or event.isError\n   local phase    = (event.phase == nil) and \"unknown\" or event.phase\n\n   print(\"Applovin Listener Event @ \", system.getTimer )\n   print('isError: ' .. tostring( isError ) .. '; phase == \"' .. tostring(phase) .. '\"' )\n\n   -- Do something with the above details...\n   --\n   if( isError ) then\n      print( \"Applovin is getting errors.\")\n      for k,v in pairs( event ) do\n         print(k,v)\n      end\n\n   -- This is all known Applovin listener phases (as of 04 SEP 2016)   \n   elseif( phase == \"init\" ) then\n   elseif( phase == \"failed\" ) then\n   elseif( phase == \"loaded\" ) then\n   elseif( phase == \"displayed\" ) then\n   elseif( phase == \"hidden\" ) then\n   elseif( phase == \"playbackBegan\" ) then\n   elseif( phase == \"playbackEnded\" ) then\n   elseif( phase == \"clicked\" ) then\n   elseif( phase == \"declinedToView\" ) then\n   elseif( phase == \"validationSucceeded\" ) then\n   elseif( phase == \"validationExceededQuota\" ) then\n   elseif( phase == \"validationRejected\" ) then\n   elseif( phase == \"validationFailed\" ) then\n\n   else        \n      print( \"Applovin is getting a weird event.phase value?! ==> \" .. tostring( event.response ) )\n      for k,v in pairs( event ) do\n         print(k,v)\n      end\n   end\nend\n\n-- =============================================================\n-- setID( os, id ) - Set the Applovin SDK Key for specific OS.\n--\n-- os - 'android', 'ios', or 'apple_tv'\n-- id - Must be a valid SDK Key\n--\n-- =============================================================\nfunction applovin_helpers.setID( os, id )\n   ids[os] = id\nend\n\n\n-- =============================================================\n-- init( [ delay ] ) - Initilize Applovin ad network.\n--                     If delay is specified, wait 'delay' ms then\n--                     initialize.\n--\n-- https://docs.coronalabs.com/daily/plugin/applovin/init.html\n-- =============================================================\nfunction applovin_helpers.init( delay )\n   -- Set default delay if not provided\n   delay = delay or 0 \n   \n   -- A function that we may call immediately or with a delay\n   -- to do the initialization work.\n   local function doInit()\n      -- If on Android,\n      \n      if( onAndroid and ids.android ) then\n            applovin.init( listener, { sdkKey = ids.android } )\n\n      elseif( oniOS and ids.ios ) then\n         applovin.init( listener, { sdkKey = ids.ios } )\n\n      elseif( onAppleTV and ids.apple_tv ) then\n         applovin.init( listener, { sdkKey = ids.apple_tv } )\n      end\n   end\n\n   -- Initialize immediately or wait a little while?\n   --\n   if( delay < 1 ) then\n      doInit()\n   else\n      timer.performWithDelay( delay, doInit )\n   end\nend\n\n\n\n-- =============================================================\n-- load() -- Load a new [incentivized] ad.\n--\n-- https://docs.coronalabs.com/daily/plugin/applovin/load.html\n-- =============================================================\nfunction applovin_helpers.load( isIncetivized )\n   applovin.load( isIncetivized )\nend\n\n\n-- =============================================================\n-- isLoaded() -- Checks if an [incentivized] ad is loaded\n--\n-- https://docs.coronalabs.com/daily/plugin/ads-Applovin-v2/isLoaded.html\n-- =============================================================\nfunction applovin_helpers.isLoaded( isIncetivized )\n   return applovin.isLoaded( isIncetivized )\nend\n\n-- =============================================================\n-- show() -- Shows an [incentivized] ad.\n--\n-- https://docs.coronalabs.com/daily/plugin/applovin/show.html\n-- =============================================================\nfunction applovin_helpers.show( isIncetivized )\n   return applovin.show( isIncetivized )\nend\n\n\n-- =============================================================\n-- setUserDetails() -- Set user details to be passed to Applovin for server-side callbacks.\n--\n-- https://docs.coronalabs.com/daily/plugin/applovin/setUserDetails.html\n-- =============================================================\nfunction applovin_helpers.setUserDetails( params )\n   return applovin.setUserDetails( params )\nend\n\n\n\n\nreturn applovin_helpers"}},"name":"applovin_helpers","images":[]}}