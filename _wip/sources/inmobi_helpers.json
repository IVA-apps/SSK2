{"inmobi_helpers":{"sounds":[],"source":{"scripts":{"inmobi_helpers.lua":"-- =============================================================\n-- inMobi Helpers Module - Generated by EAT Lean/Fat\n-- EAT Lean - https://gumroad.com/l/eatlean\n-- EAT Fat  - https://gumroad.com/l/EATFrameOneTime\n-- =============================================================\n-- inmobi_helpers.lua\n-- =============================================================\n--[[\n\n   Includes these functions:\n\n   inmobi_helpers.setID( os, adType, id ) - Set an id manually (do before init if at all).\n   inmobi_helpers.init( [ delay [, logLevel ] ] ) - Initialize ads with optional delay.  \n\n   inmobi_helpers.loadBanner( params ) - Load banner ad.\n   inmobi_helpers.loadInterstitial( params ) - Load interstitial ad.\n\n   inmobi_helpers.showBanner( [ position [, targetingOptions ] ] ) - Show banner ad.\n   inmobi_helpers.showInterstitial( [ targetingOptions ] ) - Show interstitial ad.\n\n   inmobi_helpers.isLoadedBanner() - Returns true if banner ad is loaded.\n   inmobi_helpers.isLoadedInterstitial() - Returns true if interstitial ad is loaded.\n\n   inmobi_helpers.hide( ) - Hide any showing revMob ad.\n\n--]]\n-- =============================================================\nlocal onSimulator    = ( system.getInfo( \"environment\" ) == \"simulator\" )\nlocal oniOS          = ( system.getInfo(\"platformName\") == \"iPhone OS\" )\nlocal onAndroid      = ( system.getInfo(\"platformName\") == \"Android\" )\nlocal onWinPhone     = ( system.getInfo(\"platformName\") == \"WinPhone\" )\nlocal onOSX          = ( system.getInfo(\"platformName\") == \"Mac OS X\" )\nlocal onAppleTV      = ( system.getInfo(\"platformName\") == \"tvOS\" )\nlocal onAndroidTV    = ( (system.getInfo(\"androidDisplayDensityName\") == \"tvdpi\") or\n                         (tostring(system.getInfo(\"androidDisplayApproximateDpi\")) == \"213\" ) )\nlocal onWin          = ( system.getInfo(\"platformName\") == \"Win\" )\nlocal onNook         = ( system.getInfo(\"targetAppStore\") == \"nook\" )\nlocal onAmazon       = ( system.getInfo(\"targetAppStore\") == \"amazon\" or\n                         ( string.find( system.getInfo(\"model\"), \"Fire\" ) ~= nil ) )\nlocal onDesktop      = ( ( onOSX or onWin ) and not onSimulator )\nlocal onDevice       = ( onAndroid or oniOS or onAppleTVOS or onAndroidTV  )\n-- =============================================================\n-- =============================================================\nlocal inMobi = require( \"plugin.inMobi\" )\n\nlocal lastID -- Set 'on show' to simplify call to hide\n\nlocal inmobi_helpers = {}\n\n-- ==\n--    Table of ids, separated by OS and type (banner or interstitial)\n-- ==\nlocal ids = \n{ \n   android = \n   { \n      banner         = ANDROID_BANNER_ID, \n      interstitial   = ANDROID_INTERSTITIAL_ID,\n   },\n   ios = \n   { \n      banner         = IOS_BANNER_ID, \n      interstitial   = IOS_INTERSTITIAL_ID,\n   },\n}\n\n-- ==\n--    Example inMobi Listener \n-- ==\nlocal function listener( event ) \n   -- Extract base set of useful event details:\n   local isError     = (event.isError == nil) and false or event.isError\n   local phase       = (event.phase == nil) and \"unknown\" or event.phase   \n   local eType       = (event.type == nil) and \"unknown\" or event.type   \n   local response    = (event.name == nil) and \"unknown\" or event.response\n\n   print(\"inMobi Listener Event @ \", system.getTimer )\n   print('isError: ' .. tostring( isError ) .. '; phase == \"' .. tostring(phase) .. '\"; response == \"' .. tostring(response) .. '\"' )\n\n   -- Do something with the above details...\n   --\n   if( isError ) then\n      print( \"inMobi is getting errors.\")\n      for k,v in pairs( event ) do\n         print(k,v)\n      end\n   \n   else\n      -- Note: There may be more phases.\n      if( phase == \"init\" ) then\n      elseif( phase == \"loaded\" ) then\n      elseif( phase == \"failed\" ) then\n      elseif( phase == \"displayed\" ) then\n      elseif( phase == \"closed\" ) then\n      else        \n         print( \"inMobi is getting a weird event.phase value?! ==> \" .. tostring( event.phase ) )\n         for k,v in pairs( event ) do\n            print(k,v)\n         end\n      end\n   end\nend\n\n-- =============================================================\n-- setID( os, adType, id ) - Set an id for a specific OS and ad type\n--\n-- os - 'android' or 'ios'\n-- adType - 'banner', 'interstitial'\n-- id - Must be a valid ID\n--\n-- =============================================================\nfunction inmobi_helpers.setID( os, adType, id )\n   ids[os][adType] = id\nend\n\n-- =============================================================\n-- init( [ delay [, logLevel ] ] ) - Initilize revMob ad network.\n--   If delay is specified, wait 'delay' ms then initialize.\n--  \n--  logLevel - \"debug\" or \"error\"   \n--\n-- https://docs.coronalabs.com/daily/plugin/inmobi/init.html\n-- =============================================================\nfunction inmobi_helpers.init( delay, logLevel )\n   -- Set default delay if not provided\n   delay = delay or 0 \n   \n   -- A function that we may call immediately or with a delay\n   -- to do the initialization work.\n   local function doInit()\n\n      -- If on Android,\n      if( onAndroid ) then\n         \n         -- and a interstial ID was provided, then init with it\n         if( ids.android.interstitial ) then\n            inMobi.init( listener, { accountId = ids.android.interstitial, logLevel = logLevel } )\n\n         -- or a banner id was supplied and init with it\n         elseif( ids.android.banner ) then\n            inMobi.init( listener, { accountId = ids.android.banner, logLevel = logLevel } )\n\n         end\n\n      -- else if on iOS,\n      elseif( oniOS ) then \n\n         -- and a interstial ID was provided, then init with it\n         if( ids.ios.interstitial ) then\n            inMobi.init( listener, { accountId = ids.ios.interstitial, logLevel = logLevel } )\n\n         -- or a banner id was supplied and init with it\n         elseif( ids.ios.banner ) then\n            inMobi.init( listener, { accountId = ids.ios.banner, logLevel = logLevel } )\n\n         end\n\n      end\n\n   end\n\n   -- Initialize immediately or wait a little while?\n   --\n   if( delay < 1 ) then\n      doInit()\n   else\n      timer.performWithDelay( delay, doInit )\n   end\n\nend\n\n-- =============================================================\n-- loadBanner( params ) -- Load a banner if we can.\n-- loadInterstitial( params ) -- Load an interstitial if we can.\n--\n-- https://docs.coronalabs.com/daily/plugin/inmobi/load.html\n-- =============================================================\nfunction inmobi_helpers.loadBanner( params )\n   params = params or {}\n   if( onAndroid ) then\n      inMobi.load( \"banner\", ids.android.banner, params )\n   elseif( oniOS ) then\n      inMobi.load( \"banner\", ids.ios.banner, params )\n   end\nend\nfunction inmobi_helpers.loadInterstitial( params )\n   params = params or {}\n   if( onAndroid ) then\n      inMobi.load( \"interstitial\", ids.android.interstitial, params )\n   elseif( oniOS ) then\n      inMobi.load( \"interstitial\", ids.ios.interstitial, params )\n   end\nend\n\n-- =============================================================\n-- showBanner( [ position ] ) -- Show a banner if we can.\n-- position \"top\", \"bottom, \"center\" (default: \"top\" )\n--\n-- showInterstitial() -- Show an interstitial if we can.\n--\n-- https://docs.coronalabs.com/daily/plugin/inmobi/show.html\n-- =============================================================\nfunction inmobi_helpers.showBanner( position )\n   position = position or \"top\"\n   if( onAndroid ) then\n      inMobi.show( ids.android.banner, { yAlign = position } )\n      lastID = ids.android.banner\n   elseif( oniOS ) then\n      inMobi.show( ids.ios.banner, { yAlign = position } )\n      lastID = ids.ios.banner\n   end\nend\nfunction inmobi_helpers.showInterstitial()\n   if( onAndroid ) then\n      inMobi.show( ids.android.interstitial )\n      lastID = ids.android.interstitial\n   elseif( oniOS ) then\n      inMobi.show( ids.ios.interstitial )\n      lastID = ids.ios.interstitial\n   end\nend\n\n\n-- =============================================================\n-- isLoadedBanner() - Returns true if banner ad is loaded.\n-- isLoadedInterstitial() - Returns true if interstitial ad is loaded.\n--\n-- https://docs.coronalabs.com/daily/plugin/inmobi/isLoaded.html\n-- =============================================================\nfunction inmobi_helpers.isLoadedBanner()\n   if( onAndroid ) then\n      return inMobi.isLoaded( ids.android.banner )\n   elseif( oniOS ) then\n      return inMobi.isLoaded( ids.ios.banner )\n   end\n   return false\nend\nfunction inmobi_helpers.isLoadedInterstitial()\n   if( onAndroid ) then\n      return inMobi.isLoaded( ids.android.interstitial )\n   elseif( oniOS ) then\n      return inMobi.isLoaded( ids.ios.interstitial )\n   end\n   return false\nend\n\n-- =============================================================\n-- hide() -- Hide (last shown) inMobi ad.\n--\n-- https://docs.coronalabs.com/daily/plugin/inMobi/hide.html\n-- =============================================================\nfunction inmobi_helpers.hide( )\n   if( lastID ) then\n      inMobi.hide( lastID )\n      lastID = nil\n   end\nend\n\n\nreturn inmobi_helpers"}},"name":"inmobi_helpers","images":[]}}