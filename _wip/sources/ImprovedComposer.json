{"ImprovedComposer":{"sounds":[],"source":{"scenes":{"home.lua":"-- =============================================================\n-- Your Copyright Statement Goes Here\n-- =============================================================\n--  scenes/home.lua\n-- =============================================================\nlocal composer \t\t= require( \"composer\" )\nlocal scene    \t\t= composer.newScene()\n\n----------------------------------------------------------------------\n-- Locals\n----------------------------------------------------------------------\nlocal centerX  = display.contentCenterX\nlocal centerY  = display.contentCenterY\nlocal fullw    = display.actualContentWidth\nlocal fullh    = display.actualContentHeight\nlocal left     = centerX - fullw/2\nlocal right    = centerX + fullw/2\nlocal top      = centerY - fullh/2\nlocal bottom   = centerY + fullh/2\n\n\n----------------------------------------------------------------------\n-- Forward Declarations\n----------------------------------------------------------------------\nlocal easySceneButton\n\n----------------------------------------------------------------------\n-- Improved Scene Methods\n----------------------------------------------------------------------\n--\n-- Tip: This composer template is slightly different from the \"standard\" template found here:\n-- https://docs.coronalabs.com/daily/api/library/composer/index.html#scene-template\n--\n-- I have split the scene:show() and scene:hide() methods into these distinct sub-methods:\n--\n-- * scene:willShow() - Called in place of \"will\" phase of scene:show().\n-- * scene:didShow()  - Called in place of \"did\" phase of scene:show().\n-- * scene:willHide()  - Called in place of \"will\" phase of scene:hide().\n-- * scene:didHide()   - Called in place of \"did\" phase of scene:hide().\n--\n-- I did this to help folks logically separate the phases and for those converting from storyboard.* which\n-- had similar methods.\n--\n----------------------------------------------------------------------\n\n----------------------------------------------------------------------\n-- scene:create( event ) - Called on first scene open ONLY (unless\n-- the scene has been manually or automatically destroyed.)\n----------------------------------------------------------------------\nfunction scene:create( event )\n   local sceneGroup = self.view\n   \n   -- Create a simple background using a colored rectangle\n   -- https://docs.coronalabs.com/daily/api/library/display/newRect.html\n   local background = display.newRect( sceneGroup, centerX, centerY, fullw, fullh )\n   -- https://docs.coronalabs.com/daily/api/type/ShapeObject/setFillColor.html\n   background:setFillColor( 0.2, 0.8, 0.5 )\n\n   -- Create a label showing this is the home screen (make sure it is always just below the top of screen )\n   -- https://docs.coronalabs.com/daily/api/library/display/newText.html#syntax-legacy\n   local title = display.newText( sceneGroup, \"Home\", centerX, top + 5, native.systemFontBold, 36 )\n   title.anchorY = 0\n\n   -- Create buttons to navigate to other scenes .\n   --\n   -- Tip: We forward declared easySceneButton() near the top of the file, and\n   --      implemented it later, near the bottom.  This keeps the scene file clean and well organized.\n   --\n   --      In reality you will probably use another means of creating buttons, but this works for now, and\n   --      it demonstrates some useful coding techniques.\n\n   -- Go to playGUI\n   easySceneButton( sceneGroup, centerX, centerY - 75, \"Play\", \"scenes.play\" )\n\n   -- Go to aboutGUI\n   easySceneButton( sceneGroup, centerX, centerY, \"About\", \"scenes.about\" )\n\n   -- Go to optionsGUI\n   easySceneButton( sceneGroup, centerX, centerY + 75, \"Options\", \"scenes.options\" )\n\n\nend\n\n----------------------------------------------------------------------\n-- scene:willShow( event ) - Replaces the scene:show() method.  This\n-- method is called during the \"will\" phase of scene:show().\n----------------------------------------------------------------------\nfunction scene:willShow( event )\n   local sceneGroup = self.view\n\nend\n\n----------------------------------------------------------------------\n-- scene:didShow( event ) - Replaces the scene:show() method.  This\n-- method is called during the \"did\" phase of scene:show().\n----------------------------------------------------------------------\nfunction scene:didShow( event )\n   local sceneGroup = self.view\n\nend\n\n----------------------------------------------------------------------\n-- scene:willHide( event ) - Replaces the scene:hide() method.  This\n-- method is called during the \"will\" phase of scene:hide().\n----------------------------------------------------------------------\nfunction scene:willHide( event )\n   local sceneGroup = self.view\n\nend\n\n----------------------------------------------------------------------\n-- scene:didHide( event ) - Replaces the scene:hide() method.  This\n-- method is called during the \"did\" phase of scene:hide().\n----------------------------------------------------------------------\nfunction scene:didHide( event )\n   local sceneGroup = self.view\n\nend\n\n----------------------------------------------------------------------\n-- scene:destroy( event ) - Called automatically by Composer scene library\n-- to destroy the contents of the scene (based on settings and memory constraints):\n-- https://docs.coronalabs.com/daily/api/library/composer/recycleOnSceneChange.html\n--\n-- Also called if you manually call composer.removeScene()\n-- https://docs.coronalabs.com/daily/api/library/composer/removeScene.html\n----------------------------------------------------------------------\nfunction scene:destroy( event )\n   local sceneGroup = self.view\n\nend\n\n----------------------------------------------------------------------\n--\t\t\t\tCustom Scene Functions/Methods\n----------------------------------------------------------------------\n\n-- ==\n-- Is the center of obj over obj2 (inside its axis aligned bounding box?)\n-- ==\nlocal function isInBounds( obj, obj2 )\n\n   if(not obj2) then return false end\n\n   local bounds = obj2.contentBounds\n   if( obj.x > bounds.xMax ) then return false end\n   if( obj.x < bounds.xMin ) then return false end\n   if( obj.y > bounds.yMax ) then return false end\n   if( obj.y < bounds.yMin ) then return false end\n   return true\nend\n\n\n-- ==\n--\n-- Shared touch listener for our buttons.\n--\n-- All of the buttons do basically the same thing except they send us to different scenes.\n-- So, why write unique code for each one, when with a little smarts we can use one listener instead?\n--\n-- ==\nlocal function onTouch( self, event )\n   local phase = event.phase\n   if( event.phase == \"began\" ) then\n      -- https://docs.coronalabs.com/daily/api/type/ShapeObject/setFillColor.html\n      self:setFillColor( 1, 1, 0 )\n      self.label:setFillColor( 0, 0, 0 )\n\n      -- Be sure all future events associated with this touch go ONLY to\n      -- this button.\n      --\n      -- Tip: We do this to allow for more complex button behavior.  See below...\n      --\n      -- Tip 2: This code is multitouch ready.\n      --\n      self.isFocus = true\n      display.currentStage:setFocus( self, event.id )\n\n   elseif( self.isFocus ) then\n      -- Update the fill of the button and label according to the current\n      -- position of the users finger.\n      if( isInBounds( event, self ) ) then\n         -- https://docs.coronalabs.com/daily/api/type/ShapeObject/setFillColor.html\n         self:setFillColor( 1, 1, 0 )\n         self.label:setFillColor( 0, 0, 0 )\n      else\n         -- https://docs.coronalabs.com/daily/api/type/ShapeObject/setFillColor.html\n         self:setFillColor( 0.8, 0.8, 0 )\n         self.label:setFillColor( 1, 1, 1  )\n      end\n\n      if( phase == \"ended\" or phase == \"canceled\" ) then\n\n         -- Stop sending touch events to this function\n         self.isFocus = false\n         display.currentStage:setFocus( self, nil )\n\n         -- Reset the button and label fills\n         -- https://docs.coronalabs.com/daily/api/type/ShapeObject/setFillColor.html\n         self:setFillColor( 0.8, 0.8, 0 )\n         self.label:setFillColor( 1, 1, 1  )\n\n\n         -- Go to the scene that this button is configured for...\n         --\n         -- See easySceneButton() function below to see where toScene is assigned to \n         -- each button.\n         --\n         -- https://docs.coronalabs.com/daily/api/library/composer/gotoScene.html\n         if( isInBounds( event, self ) ) then\n            composer.gotoScene( self.toScene, { time = 500, effect = \"crossFade\" } )\n         end\n      end\n\n   end\n\n   -- Stop touch from propagating to objects 'below' the button\n   return true \nend\n\n\n-- ==\n-- A basic push button builder.\n-- ==\neasySceneButton = function( group, x, y, labelText, toScene  )\n\n   -- Draw a simple rectangle as the button.\n   -- https://docs.coronalabs.com/daily/api/library/display/newRect.html\n   local button = display.newRect( group, x, y, 200, 50 )\n   -- https://docs.coronalabs.com/daily/api/type/ShapeObject/setFillColor.html\n   button:setFillColor(  0.8, 0.8, 0 )\n   -- https://docs.coronalabs.com/daily/api/type/ShapeObject/strokeWidth.html\n   button.strokeWidth = 2\n   -- https://docs.coronalabs.com/daily/api/type/ShapeObject/setStrokeColor.html\n   button:setStrokeColor(0,0,0)\n\n   -- Add a label\n   -- https://docs.coronalabs.com/daily/api/library/display/newText.html#syntax-legacy\n   button.label = display.newText( group, labelText, x, y, native.systemFontBold, 36 )\n\n   -- Tell this button where it should take us if pressed\n   button.toScene = toScene\n\n   -- Attach the shared touch listener\n   -- Tip: This is a very efficient way of coding when you have multiple objects \n   -- that effectively do the same thing with a small change for each instance.\n   --\n   button.touch = onTouch\n   button:addEventListener( \"touch\" )\nend\n\n\n---------------------------------------------------------------------------------\n-- Scene Dispatch Events, Etc. - Generally Do Not Touch Below This Line\n---------------------------------------------------------------------------------\n\n-- This code splits the \"show\" event into two separate events: willShow and didShow\n-- for ease of coding above.\nfunction scene:show( event )\n   local sceneGroup \t= self.view\n   local willDid \t= event.phase\n   if( willDid == \"will\" ) then\n      self:willShow( event )\n   elseif( willDid == \"did\" ) then\n      self:didShow( event )\n   end\nend\n\n-- This code splits the \"hide\" event into two separate events: willHide and didHide\n-- for ease of coding above.\nfunction scene:hide( event )\n   local sceneGroup \t= self.view\n   local willDid \t= event.phase\n   if( willDid == \"will\" ) then\n      self:willHide( event )\n   elseif( willDid == \"did\" ) then\n      self:didHide( event )\n   end\nend\nscene:addEventListener( \"create\", scene )\nscene:addEventListener( \"show\", scene )\nscene:addEventListener( \"hide\", scene )\nscene:addEventListener( \"destroy\", scene )\n---------------------------------------------------------------------------------\nreturn scene","about.lua":"-- =============================================================\n-- Your Copyright Statement Goes Here\n-- =============================================================\n--  scenes/about.lua\n-- =============================================================\nlocal composer \t\t= require( \"composer\" )\nlocal scene    \t\t= composer.newScene()\n\n----------------------------------------------------------------------\n-- Locals\n----------------------------------------------------------------------\nlocal centerX  = display.contentCenterX\nlocal centerY  = display.contentCenterY\nlocal fullw    = display.actualContentWidth\nlocal fullh    = display.actualContentHeight\nlocal left     = centerX - fullw/2\nlocal right    = centerX + fullw/2\nlocal top      = centerY - fullh/2\nlocal bottom   = centerY + fullh/2\n\n\n----------------------------------------------------------------------\n-- Forward Declarations\n----------------------------------------------------------------------\nlocal easySceneButton\n\n----------------------------------------------------------------------\n-- Improved Scene Methods\n----------------------------------------------------------------------\n--\n-- Tip: This composer template is slightly different from the \"standard\" template found here:\n-- https://docs.coronalabs.com/daily/api/library/composer/index.html#scene-template\n--\n-- I have split the scene:show() and scene:hide() methods into these distinct sub-methods:\n--\n-- * scene:willShow() - Called in place of \"will\" phase of scene:show().\n-- * scene:didShow()  - Called in place of \"did\" phase of scene:show().\n-- * scene:willHide()  - Called in place of \"will\" phase of scene:hide().\n-- * scene:didHide()   - Called in place of \"did\" phase of scene:hide().\n--\n-- I did this to help folks logically separate the phases and for those converting from storyboard.* which\n-- had similar methods.\n--\n----------------------------------------------------------------------\n\n----------------------------------------------------------------------\n-- scene:create( event ) - Called on first scene open ONLY (unless\n-- the scene has been manually or automatically destroyed.)\n----------------------------------------------------------------------\nfunction scene:create( event )\n   local sceneGroup = self.view\n   \n   -- Create a simple background using a colored rectangle\n   -- https://docs.coronalabs.com/daily/api/library/display/newRect.html\n   local background = display.newRect( sceneGroup, centerX, centerY, fullw, fullh )\n   -- https://docs.coronalabs.com/daily/api/type/ShapeObject/setFillColor.html\n   background:setFillColor( 0.25, 0.25, 0.25 )\n\n   -- Create a label showing this is the About screen\n   -- https://docs.coronalabs.com/daily/api/library/display/newText.html#syntax-legacy\n   local title = display.newText( sceneGroup, \"About\", centerX, centerY, native.systemFontBold, 36 )\n   title.anchorY = 0\n\n   -- Create a back button to take us back home.  (Make sure it is always snugged in the upper-left corner.)\n   --\n   -- Tip: We forward declared easySceneButton() near the top of the file, and\n   --      implemented it later, near the bottom.  This keeps the scene file clean and well organized.\n   --\n   --      In reality you will probably use another means of creating buttons, but this works for now, and\n   --      it demonstrates some useful coding techniques.\n\n   -- Go to home\n   easySceneButton( sceneGroup, left + 50, top + 25, \"Home\", \"scenes.home\" )\n\nend\n\n----------------------------------------------------------------------\n-- scene:willShow( event ) - Replaces the scene:show() method.  This\n-- method is called during the \"will\" phase of scene:show().\n----------------------------------------------------------------------\nfunction scene:willShow( event )\n   local sceneGroup = self.view\n\nend\n\n----------------------------------------------------------------------\n-- scene:didShow( event ) - Replaces the scene:show() method.  This\n-- method is called during the \"did\" phase of scene:show().\n----------------------------------------------------------------------\nfunction scene:didShow( event )\n   local sceneGroup = self.view\n\nend\n\n----------------------------------------------------------------------\n-- scene:willHide( event ) - Replaces the scene:hide() method.  This\n-- method is called during the \"will\" phase of scene:hide().\n----------------------------------------------------------------------\nfunction scene:willHide( event )\n   local sceneGroup = self.view\n\nend\n\n----------------------------------------------------------------------\n-- scene:didHide( event ) - Replaces the scene:hide() method.  This\n-- method is called during the \"did\" phase of scene:hide().\n----------------------------------------------------------------------\nfunction scene:didHide( event )\n   local sceneGroup = self.view\n\nend\n\n----------------------------------------------------------------------\n-- scene:destroy( event ) - Called automatically by Composer scene library\n-- to destroy the contents of the scene (based on settings and memory constraints):\n-- https://docs.coronalabs.com/daily/api/library/composer/recycleOnSceneChange.html\n--\n-- Also called if you manually call composer.removeScene()\n-- https://docs.coronalabs.com/daily/api/library/composer/removeScene.html\n----------------------------------------------------------------------\nfunction scene:destroy( event )\n   local sceneGroup = self.view\n\nend\n\n----------------------------------------------------------------------\n--\t\t\t\tCustom Scene Functions/Methods\n----------------------------------------------------------------------\n\n-- ==\n-- Is the center of obj over obj2 (inside its axis aligned bounding box?)\n-- ==\nlocal function isInBounds( obj, obj2 )\n\n   if(not obj2) then return false end\n\n   local bounds = obj2.contentBounds\n   if( obj.x > bounds.xMax ) then return false end\n   if( obj.x < bounds.xMin ) then return false end\n   if( obj.y > bounds.yMax ) then return false end\n   if( obj.y < bounds.yMin ) then return false end\n   return true\nend\n\n\n-- ==\n--\n-- Shared touch listener for our buttons.\n--\n-- All of the buttons do basically the same thing except they send us to different scenes.\n-- So, why write unique code for each one, when with a little smarts we can use one listener instead?\n--\n-- ==\nlocal function onTouch( self, event )\n   local phase = event.phase\n   if( event.phase == \"began\" ) then\n      -- https://docs.coronalabs.com/daily/api/type/ShapeObject/setFillColor.html\n      self:setFillColor( 1, 1, 0 )\n      self.label:setFillColor( 0, 0, 0 )\n\n      -- Be sure all future events associated with this touch go ONLY to\n      -- this button.\n      --\n      -- Tip: We do this to allow for more complex button behavior.  See below...\n      --\n      -- Tip 2: This code is multitouch ready.\n      --\n      self.isFocus = true\n      display.currentStage:setFocus( self, event.id )\n\n   elseif( self.isFocus ) then\n      -- Update the fill of the button and label according to the current\n      -- position of the users finger.\n      if( isInBounds( event, self ) ) then\n         -- https://docs.coronalabs.com/daily/api/type/ShapeObject/setFillColor.html\n         self:setFillColor( 1, 1, 0 )\n         self.label:setFillColor( 0, 0, 0 )\n      else\n         -- https://docs.coronalabs.com/daily/api/type/ShapeObject/setFillColor.html\n         self:setFillColor( 0.8, 0.8, 0 )\n         self.label:setFillColor( 1, 1, 1  )\n      end\n\n      if( phase == \"ended\" or phase == \"canceled\" ) then\n\n         -- Stop sending touch events to this function\n         self.isFocus = false\n         display.currentStage:setFocus( self, nil )\n\n         -- Reset the button and label fills\n         -- https://docs.coronalabs.com/daily/api/type/ShapeObject/setFillColor.html\n         self:setFillColor( 0.8, 0.8, 0 )\n         self.label:setFillColor( 1, 1, 1  )\n        \n\n         -- Go to the scene that this button is configured for...\n         --\n         -- See easySceneButton() function below to see where toScene is assigned to \n         -- each button.\n         --\n         -- https://docs.coronalabs.com/daily/api/library/composer/gotoScene.html\n         if( isInBounds( event, self ) ) then\n            composer.gotoScene( self.toScene, { time = 500, effect = \"crossFade\" } )\n         end\n      end\n\n   end\n\n   -- Stop touch from propagating to objects 'below' the button\n   return true \nend\n\n\n-- ==\n-- A basic push button builder.\n-- ==\neasySceneButton = function( group, x, y, labelText, toScene  )\n\n   -- Draw a simple rectangle as the button.\n   -- https://docs.coronalabs.com/daily/api/library/display/newRect.html\n   local button = display.newRect( group, x, y, 100, 50 )\n   -- https://docs.coronalabs.com/daily/api/type/ShapeObject/setFillColor.html\n   button:setFillColor(  0.8, 0.8, 0 )\n   -- https://docs.coronalabs.com/daily/api/type/ShapeObject/strokeWidth.html\n   button.strokeWidth = 2\n   -- https://docs.coronalabs.com/daily/api/type/ShapeObject/setStrokeColor.html\n   button:setStrokeColor(0,0,0)\n\n   -- Add a label\n   -- https://docs.coronalabs.com/daily/api/library/display/newText.html#syntax-legacy\n   button.label = display.newText( group, labelText, x, y, native.systemFontBold, 28 )\n\n   -- Tell this button where it should take us if pressed\n   button.toScene = toScene\n\n   -- Attach the shared touch listener\n   -- Tip: This is a very efficient way of coding when you have multiple objects \n   -- that effectively do the same thing with a small change for each instance.\n   --\n   button.touch = onTouch\n   button:addEventListener( \"touch\" )\nend\n\n\n---------------------------------------------------------------------------------\n-- Scene Dispatch Events, Etc. - Generally Do Not Touch Below This Line\n---------------------------------------------------------------------------------\n\n-- This code splits the \"show\" event into two separate events: willShow and didShow\n-- for ease of coding above.\nfunction scene:show( event )\n   local sceneGroup \t= self.view\n   local willDid \t= event.phase\n   if( willDid == \"will\" ) then\n      self:willShow( event )\n   elseif( willDid == \"did\" ) then\n      self:didShow( event )\n   end\nend\n\n-- This code splits the \"hide\" event into two separate events: willHide and didHide\n-- for ease of coding above.\nfunction scene:hide( event )\n   local sceneGroup \t= self.view\n   local willDid \t= event.phase\n   if( willDid == \"will\" ) then\n      self:willHide( event )\n   elseif( willDid == \"did\" ) then\n      self:didHide( event )\n   end\nend\nscene:addEventListener( \"create\", scene )\nscene:addEventListener( \"show\", scene )\nscene:addEventListener( \"hide\", scene )\nscene:addEventListener( \"destroy\", scene )\n---------------------------------------------------------------------------------\nreturn scene","play.lua":"-- =============================================================\n-- Your Copyright Statement Goes Here\n-- =============================================================\n--  scenes/play.lua\n-- =============================================================\nlocal composer \t\t= require( \"composer\" )\nlocal scene    \t\t= composer.newScene()\n\n----------------------------------------------------------------------\n-- Locals\n----------------------------------------------------------------------\nlocal centerX  = display.contentCenterX\nlocal centerY  = display.contentCenterY\nlocal fullw    = display.actualContentWidth\nlocal fullh    = display.actualContentHeight\nlocal left     = centerX - fullw/2\nlocal right    = centerX + fullw/2\nlocal top      = centerY - fullh/2\nlocal bottom   = centerY + fullh/2\n\n\n----------------------------------------------------------------------\n-- Forward Declarations\n----------------------------------------------------------------------\nlocal easySceneButton\n\n----------------------------------------------------------------------\n-- Improved Scene Methods\n----------------------------------------------------------------------\n--\n-- Tip: This composer template is slightly different from the \"standard\" template found here:\n-- https://docs.coronalabs.com/daily/api/library/composer/index.html#scene-template\n--\n-- I have split the scene:show() and scene:hide() methods into these distinct sub-methods:\n--\n-- * scene:willShow() - Called in place of \"will\" phase of scene:show().\n-- * scene:didShow()  - Called in place of \"did\" phase of scene:show().\n-- * scene:willHide()  - Called in place of \"will\" phase of scene:hide().\n-- * scene:didHide()   - Called in place of \"did\" phase of scene:hide().\n--\n-- I did this to help folks logically separate the phases and for those converting from storyboard.* which\n-- had similar methods.\n--\n----------------------------------------------------------------------\n\n----------------------------------------------------------------------\n-- scene:create( event ) - Called on first scene open ONLY (unless\n-- the scene has been manually or automatically destroyed.)\n----------------------------------------------------------------------\nfunction scene:create( event )\n   local sceneGroup = self.view\n   \n   -- Create a simple background using a colored rectangle\n   -- https://docs.coronalabs.com/daily/api/library/display/newRect.html\n   local background = display.newRect( sceneGroup, centerX, centerY, fullw, fullh )\n   -- https://docs.coronalabs.com/daily/api/type/ShapeObject/setFillColor.html\n   background:setFillColor( 0.25, 0.25, 0.25 )\n\n   -- Create a label showing this is the home screen\n   -- https://docs.coronalabs.com/daily/api/library/display/newText.html#syntax-legacy\n   local title = display.newText( sceneGroup, \"Play\", centerX, centerY, native.systemFontBold, 36 )\n   title.anchorY = 0\n\n   -- Create a back button to take us back home.  (Make sure it is always snugged in the upper-left corner.)\n   --\n   -- Tip: We forward declared easySceneButton() near the top of the file, and\n   --      implemented it later, near the bottom.  This keeps the scene file clean and well organized.\n   --\n   --      In reality you will probably use another means of creating buttons, but this works for now, and\n   --      it demonstrates some useful coding techniques.\n\n   -- Go to home\n   easySceneButton( sceneGroup, left + 50, top + 25, \"Home\", \"scenes.home\" )\n\nend\n\n----------------------------------------------------------------------\n-- scene:willShow( event ) - Replaces the scene:show() method.  This\n-- method is called during the \"will\" phase of scene:show().\n----------------------------------------------------------------------\nfunction scene:willShow( event )\n   local sceneGroup = self.view\n\nend\n\n----------------------------------------------------------------------\n-- scene:didShow( event ) - Replaces the scene:show() method.  This\n-- method is called during the \"did\" phase of scene:show().\n----------------------------------------------------------------------\nfunction scene:didShow( event )\n   local sceneGroup = self.view\n\nend\n\n----------------------------------------------------------------------\n-- scene:willHide( event ) - Replaces the scene:hide() method.  This\n-- method is called during the \"will\" phase of scene:hide().\n----------------------------------------------------------------------\nfunction scene:willHide( event )\n   local sceneGroup = self.view\n\nend\n\n----------------------------------------------------------------------\n-- scene:didHide( event ) - Replaces the scene:hide() method.  This\n-- method is called during the \"did\" phase of scene:hide().\n----------------------------------------------------------------------\nfunction scene:didHide( event )\n   local sceneGroup = self.view\n\nend\n\n----------------------------------------------------------------------\n-- scene:destroy( event ) - Called automatically by Composer scene library\n-- to destroy the contents of the scene (based on settings and memory constraints):\n-- https://docs.coronalabs.com/daily/api/library/composer/recycleOnSceneChange.html\n--\n-- Also called if you manually call composer.removeScene()\n-- https://docs.coronalabs.com/daily/api/library/composer/removeScene.html\n----------------------------------------------------------------------\nfunction scene:destroy( event )\n   local sceneGroup = self.view\n\nend\n\n----------------------------------------------------------------------\n--\t\t\t\tCustom Scene Functions/Methods\n----------------------------------------------------------------------\n\n-- ==\n-- Is the center of obj over obj2 (inside its axis aligned bounding box?)\n-- ==\nlocal function isInBounds( obj, obj2 )\n\n   if(not obj2) then return false end\n\n   local bounds = obj2.contentBounds\n   if( obj.x > bounds.xMax ) then return false end\n   if( obj.x < bounds.xMin ) then return false end\n   if( obj.y > bounds.yMax ) then return false end\n   if( obj.y < bounds.yMin ) then return false end\n   return true\nend\n\n\n-- ==\n--\n-- Shared touch listener for our buttons.\n--\n-- All of the buttons do basically the same thing except they send us to different scenes.\n-- So, why write unique code for each one, when with a little smarts we can use one listener instead?\n--\n-- ==\nlocal function onTouch( self, event )\n   local phase = event.phase\n   if( event.phase == \"began\" ) then\n      -- https://docs.coronalabs.com/daily/api/type/ShapeObject/setFillColor.html\n      self:setFillColor( 1, 1, 0 )\n      self.label:setFillColor( 0, 0, 0 )\n\n      -- Be sure all future events associated with this touch go ONLY to\n      -- this button.\n      --\n      -- Tip: We do this to allow for more complex button behavior.  See below...\n      --\n      -- Tip 2: This code is multitouch ready.\n      --\n      self.isFocus = true\n      display.currentStage:setFocus( self, event.id )\n\n   elseif( self.isFocus ) then\n      -- Update the fill of the button and label according to the current\n      -- position of the users finger.\n      if( isInBounds( event, self ) ) then\n         -- https://docs.coronalabs.com/daily/api/type/ShapeObject/setFillColor.html\n         self:setFillColor( 1, 1, 0 )\n         self.label:setFillColor( 0, 0, 0 )\n      else\n         -- https://docs.coronalabs.com/daily/api/type/ShapeObject/setFillColor.html\n         self:setFillColor( 0.8, 0.8, 0 )\n         self.label:setFillColor( 1, 1, 1  )\n      end\n\n      if( phase == \"ended\" or phase == \"canceled\" ) then\n\n         -- Stop sending touch events to this function\n         self.isFocus = false\n         display.currentStage:setFocus( self, nil )\n\n         -- Reset the button and label fills\n         -- https://docs.coronalabs.com/daily/api/type/ShapeObject/setFillColor.html\n         self:setFillColor( 0.8, 0.8, 0 )\n         self.label:setFillColor( 1, 1, 1  )\n        \n\n         -- Go to the scene that this button is configured for...\n         --\n         -- See easySceneButton() function below to see where toScene is assigned to \n         -- each button.\n         --\n         -- https://docs.coronalabs.com/daily/api/library/composer/gotoScene.html\n         if( isInBounds( event, self ) ) then\n            composer.gotoScene( self.toScene, { time = 500, effect = \"crossFade\" } )\n         end\n      end\n\n   end\n\n   -- Stop touch from propagating to objects 'below' the button\n   return true \nend\n\n\n-- ==\n-- A basic push button builder.\n-- ==\neasySceneButton = function( group, x, y, labelText, toScene  )\n\n   -- Draw a simple rectangle as the button.\n   -- https://docs.coronalabs.com/daily/api/library/display/newRect.html\n   local button = display.newRect( group, x, y, 100, 50 )\n   -- https://docs.coronalabs.com/daily/api/type/ShapeObject/setFillColor.html\n   button:setFillColor(  0.8, 0.8, 0 )\n   -- https://docs.coronalabs.com/daily/api/type/ShapeObject/strokeWidth.html\n   button.strokeWidth = 2\n   -- https://docs.coronalabs.com/daily/api/type/ShapeObject/setStrokeColor.html\n   button:setStrokeColor(0,0,0)\n\n   -- Add a label\n   -- https://docs.coronalabs.com/daily/api/library/display/newText.html#syntax-legacy\n   button.label = display.newText( group, labelText, x, y, native.systemFontBold, 28 )\n\n   -- Tell this button where it should take us if pressed\n   button.toScene = toScene\n\n   -- Attach the shared touch listener\n   -- Tip: This is a very efficient way of coding when you have multiple objects \n   -- that effectively do the same thing with a small change for each instance.\n   --\n   button.touch = onTouch\n   button:addEventListener( \"touch\" )\nend\n\n\n---------------------------------------------------------------------------------\n-- Scene Dispatch Events, Etc. - Generally Do Not Touch Below This Line\n---------------------------------------------------------------------------------\n\n-- This code splits the \"show\" event into two separate events: willShow and didShow\n-- for ease of coding above.\nfunction scene:show( event )\n   local sceneGroup \t= self.view\n   local willDid \t= event.phase\n   if( willDid == \"will\" ) then\n      self:willShow( event )\n   elseif( willDid == \"did\" ) then\n      self:didShow( event )\n   end\nend\n\n-- This code splits the \"hide\" event into two separate events: willHide and didHide\n-- for ease of coding above.\nfunction scene:hide( event )\n   local sceneGroup \t= self.view\n   local willDid \t= event.phase\n   if( willDid == \"will\" ) then\n      self:willHide( event )\n   elseif( willDid == \"did\" ) then\n      self:didHide( event )\n   end\nend\nscene:addEventListener( \"create\", scene )\nscene:addEventListener( \"show\", scene )\nscene:addEventListener( \"hide\", scene )\nscene:addEventListener( \"destroy\", scene )\n---------------------------------------------------------------------------------\nreturn scene","options.lua":"-- =============================================================\n-- Your Copyright Statement Goes Here\n-- =============================================================\n--  scenes/option.lua\n-- =============================================================\nlocal composer \t\t= require( \"composer\" )\nlocal scene    \t\t= composer.newScene()\n\n----------------------------------------------------------------------\n-- Locals\n----------------------------------------------------------------------\nlocal centerX  = display.contentCenterX\nlocal centerY  = display.contentCenterY\nlocal fullw    = display.actualContentWidth\nlocal fullh    = display.actualContentHeight\nlocal left     = centerX - fullw/2\nlocal right    = centerX + fullw/2\nlocal top      = centerY - fullh/2\nlocal bottom   = centerY + fullh/2\n\n\n----------------------------------------------------------------------\n-- Forward Declarations\n----------------------------------------------------------------------\nlocal easySceneButton\n\n----------------------------------------------------------------------\n-- Improved Scene Methods\n----------------------------------------------------------------------\n--\n-- Tip: This composer template is slightly different from the \"standard\" template found here:\n-- https://docs.coronalabs.com/daily/api/library/composer/index.html#scene-template\n--\n-- I have split the scene:show() and scene:hide() methods into these distinct sub-methods:\n--\n-- * scene:willShow() - Called in place of \"will\" phase of scene:show().\n-- * scene:didShow()  - Called in place of \"did\" phase of scene:show().\n-- * scene:willHide()  - Called in place of \"will\" phase of scene:hide().\n-- * scene:didHide()   - Called in place of \"did\" phase of scene:hide().\n--\n-- I did this to help folks logically separate the phases and for those converting from storyboard.* which\n-- had similar methods.\n--\n----------------------------------------------------------------------\n\n----------------------------------------------------------------------\n-- scene:create( event ) - Called on first scene open ONLY (unless\n-- the scene has been manually or automatically destroyed.)\n----------------------------------------------------------------------\nfunction scene:create( event )\n   local sceneGroup = self.view\n   \n   -- Create a simple background using a colored rectangle\n   -- https://docs.coronalabs.com/daily/api/library/display/newRect.html\n   local background = display.newRect( sceneGroup, centerX, centerY, fullw, fullh )\n   -- https://docs.coronalabs.com/daily/api/type/ShapeObject/setFillColor.html\n   background:setFillColor( 0.25, 0.25, 0.25 )\n\n   -- Create a label showing this is the Options screen\n   -- https://docs.coronalabs.com/daily/api/library/display/newText.html#syntax-legacy\n   local title = display.newText( sceneGroup, \"Options\", centerX, centerY, native.systemFontBold, 36 )\n   title.anchorY = 0\n\n   -- Create a back button to take us back home.  (Make sure it is always snugged in the upper-left corner.)\n   --\n   -- Tip: We forward declared easySceneButton() near the top of the file, and\n   --      implemented it later, near the bottom.  This keeps the scene file clean and well organized.\n   --\n   --      In reality you will probably use another means of creating buttons, but this works for now, and\n   --      it demonstrates some useful coding techniques.\n\n   -- Go to home\n   easySceneButton( sceneGroup, left + 50, top + 25, \"Home\", \"scenes.home\" )\n\nend\n\n----------------------------------------------------------------------\n-- scene:willShow( event ) - Replaces the scene:show() method.  This\n-- method is called during the \"will\" phase of scene:show().\n----------------------------------------------------------------------\nfunction scene:willShow( event )\n   local sceneGroup = self.view\n\nend\n\n----------------------------------------------------------------------\n-- scene:didShow( event ) - Replaces the scene:show() method.  This\n-- method is called during the \"did\" phase of scene:show().\n----------------------------------------------------------------------\nfunction scene:didShow( event )\n   local sceneGroup = self.view\n\nend\n\n----------------------------------------------------------------------\n-- scene:willHide( event ) - Replaces the scene:hide() method.  This\n-- method is called during the \"will\" phase of scene:hide().\n----------------------------------------------------------------------\nfunction scene:willHide( event )\n   local sceneGroup = self.view\n\nend\n\n----------------------------------------------------------------------\n-- scene:didHide( event ) - Replaces the scene:hide() method.  This\n-- method is called during the \"did\" phase of scene:hide().\n----------------------------------------------------------------------\nfunction scene:didHide( event )\n   local sceneGroup = self.view\n\nend\n\n----------------------------------------------------------------------\n-- scene:destroy( event ) - Called automatically by Composer scene library\n-- to destroy the contents of the scene (based on settings and memory constraints):\n-- https://docs.coronalabs.com/daily/api/library/composer/recycleOnSceneChange.html\n--\n-- Also called if you manually call composer.removeScene()\n-- https://docs.coronalabs.com/daily/api/library/composer/removeScene.html\n----------------------------------------------------------------------\nfunction scene:destroy( event )\n   local sceneGroup = self.view\n\nend\n\n----------------------------------------------------------------------\n--\t\t\t\tCustom Scene Functions/Methods\n----------------------------------------------------------------------\n\n-- ==\n-- Is the center of obj over obj2 (inside its axis aligned bounding box?)\n-- ==\nlocal function isInBounds( obj, obj2 )\n\n   if(not obj2) then return false end\n\n   local bounds = obj2.contentBounds\n   if( obj.x > bounds.xMax ) then return false end\n   if( obj.x < bounds.xMin ) then return false end\n   if( obj.y > bounds.yMax ) then return false end\n   if( obj.y < bounds.yMin ) then return false end\n   return true\nend\n\n\n-- ==\n--\n-- Shared touch listener for our buttons.\n--\n-- All of the buttons do basically the same thing except they send us to different scenes.\n-- So, why write unique code for each one, when with a little smarts we can use one listener instead?\n--\n-- ==\nlocal function onTouch( self, event )\n   local phase = event.phase\n   if( event.phase == \"began\" ) then\n      -- https://docs.coronalabs.com/daily/api/type/ShapeObject/setFillColor.html\n      self:setFillColor( 1, 1, 0 )\n      self.label:setFillColor( 0, 0, 0 )\n\n      -- Be sure all future events associated with this touch go ONLY to\n      -- this button.\n      --\n      -- Tip: We do this to allow for more complex button behavior.  See below...\n      --\n      -- Tip 2: This code is multitouch ready.\n      --\n      self.isFocus = true\n      display.currentStage:setFocus( self, event.id )\n\n   elseif( self.isFocus ) then\n      -- Update the fill of the button and label according to the current\n      -- position of the users finger.\n      if( isInBounds( event, self ) ) then\n         -- https://docs.coronalabs.com/daily/api/type/ShapeObject/setFillColor.html\n         self:setFillColor( 1, 1, 0 )\n         self.label:setFillColor( 0, 0, 0 )\n      else\n         -- https://docs.coronalabs.com/daily/api/type/ShapeObject/setFillColor.html\n         self:setFillColor( 0.8, 0.8, 0 )\n         self.label:setFillColor( 1, 1, 1  )\n      end\n\n      if( phase == \"ended\" or phase == \"canceled\" ) then\n\n         -- Stop sending touch events to this function\n         self.isFocus = false\n         display.currentStage:setFocus( self, nil )\n\n         -- Reset the button and label fills\n         -- https://docs.coronalabs.com/daily/api/type/ShapeObject/setFillColor.html\n         self:setFillColor( 0.8, 0.8, 0 )\n         self.label:setFillColor( 1, 1, 1  )\n        \n\n         -- Go to the scene that this button is configured for...\n         --\n         -- See easySceneButton() function below to see where toScene is assigned to \n         -- each button.\n         --\n         -- https://docs.coronalabs.com/daily/api/library/composer/gotoScene.html\n         if( isInBounds( event, self ) ) then\n            composer.gotoScene( self.toScene, { time = 500, effect = \"crossFade\" } )\n         end\n      end\n\n   end\n\n   -- Stop touch from propagating to objects 'below' the button\n   return true \nend\n\n\n-- ==\n-- A basic push button builder.\n-- ==\neasySceneButton = function( group, x, y, labelText, toScene  )\n\n   -- Draw a simple rectangle as the button.\n   -- https://docs.coronalabs.com/daily/api/library/display/newRect.html\n   local button = display.newRect( group, x, y, 100, 50 )\n   -- https://docs.coronalabs.com/daily/api/type/ShapeObject/setFillColor.html\n   button:setFillColor(  0.8, 0.8, 0 )\n   -- https://docs.coronalabs.com/daily/api/type/ShapeObject/strokeWidth.html\n   button.strokeWidth = 2\n   -- https://docs.coronalabs.com/daily/api/type/ShapeObject/setStrokeColor.html\n   button:setStrokeColor(0,0,0)\n\n   -- Add a label\n   -- https://docs.coronalabs.com/daily/api/library/display/newText.html#syntax-legacy\n   button.label = display.newText( group, labelText, x, y, native.systemFontBold, 28 )\n\n   -- Tell this button where it should take us if pressed\n   button.toScene = toScene\n\n   -- Attach the shared touch listener\n   -- Tip: This is a very efficient way of coding when you have multiple objects \n   -- that effectively do the same thing with a small change for each instance.\n   --\n   button.touch = onTouch\n   button:addEventListener( \"touch\" )\nend\n\n\n---------------------------------------------------------------------------------\n-- Scene Dispatch Events, Etc. - Generally Do Not Touch Below This Line\n---------------------------------------------------------------------------------\n\n-- This code splits the \"show\" event into two separate events: willShow and didShow\n-- for ease of coding above.\nfunction scene:show( event )\n   local sceneGroup \t= self.view\n   local willDid \t= event.phase\n   if( willDid == \"will\" ) then\n      self:willShow( event )\n   elseif( willDid == \"did\" ) then\n      self:didShow( event )\n   end\nend\n\n-- This code splits the \"hide\" event into two separate events: willHide and didHide\n-- for ease of coding above.\nfunction scene:hide( event )\n   local sceneGroup \t= self.view\n   local willDid \t= event.phase\n   if( willDid == \"will\" ) then\n      self:willHide( event )\n   elseif( willDid == \"did\" ) then\n      self:didHide( event )\n   end\nend\nscene:addEventListener( \"create\", scene )\nscene:addEventListener( \"show\", scene )\nscene:addEventListener( \"hide\", scene )\nscene:addEventListener( \"destroy\", scene )\n---------------------------------------------------------------------------------\nreturn scene","splash.lua":"-- =============================================================\n-- Your Copyright Statement Goes Here\n-- =============================================================\n--  scenes/splash.lua\n-- =============================================================\nlocal composer \t\t= require( \"composer\" )\nlocal scene    \t\t= composer.newScene()\n\n----------------------------------------------------------------------\n-- Locals\n----------------------------------------------------------------------\nlocal centerX  = display.contentCenterX\nlocal centerY  = display.contentCenterY\nlocal fullw    = display.actualContentWidth\nlocal fullh    = display.actualContentHeight\nlocal left     = centerX - fullw/2\nlocal right    = centerX + fullw/2\nlocal top      = centerY - fullh/2\nlocal bottom   = centerY + fullh/2\n\n\n----------------------------------------------------------------------\n-- Improved Scene Methods\n----------------------------------------------------------------------\n--\n-- Tip: This composer template is slightly different from the \"standard\" template found here:\n-- https://docs.coronalabs.com/daily/api/library/composer/index.html#scene-template\n--\n-- I have split the scene:show() and scene:hide() methods into these distinct sub-methods:\n--\n-- * scene:willShow() - Called in place of \"will\" phase of scene:show().\n-- * scene:didShow()  - Called in place of \"did\" phase of scene:show().\n-- * scene:willHide()  - Called in place of \"will\" phase of scene:hide().\n-- * scene:didHide()   - Called in place of \"did\" phase of scene:hide().\n--\n-- I did this to help folks logically separate the phases and for those converting from storyboard.* which\n-- had similar methods.\n--\n----------------------------------------------------------------------\n\n----------------------------------------------------------------------\n-- scene:create( event ) - Called on first scene open ONLY (unless\n-- the scene has been manually or automatically destroyed.)\n----------------------------------------------------------------------\nfunction scene:create( event )\n   local sceneGroup = self.view\n   \n   -- Create a simple background using a colored rectangle\n   -- https://docs.coronalabs.com/daily/api/library/display/newRect.html\n   local background = display.newRect( sceneGroup, centerX, centerY, fullw, fullh )\n   -- https://docs.coronalabs.com/daily/api/type/ShapeObject/setFillColor.html\n   background:setFillColor( 0.2, 0.5, 0.8 )\n\n   -- Create a label showing the game title (Splash for now...)\n   -- https://docs.coronalabs.com/daily/api/library/display/newText.html#syntax-legacy\n   local title = display.newText( sceneGroup, \"Splash\", centerX, centerY, native.systemFontBold, 36 )\n\n   -- Wait 5 seconds and go automatically to the home scene (main menu)\n   -- https://docs.coronalabs.com/daily/api/library/timer/performWithDelay.html\n   local lastTimer = timer.performWithDelay( 5000,\n      function()\n         -- https://docs.coronalabs.com/daily/api/library/composer/gotoScene.html\n         composer.gotoScene( \"scenes.home\", { time = 500, effect = \"crossFade\" } )\n      end )\n\n   -- Allow the player to touch the screen to go directly to the home scene\n   function background.touch( self, event )      \n      if( event.phase == \"began\" ) then\n         -- Cancel the outstanding timer\n         -- https://docs.coronalabs.com/daily/api/library/timer/cancel.html\n         timer.cancel( lastTimer )\n\n         -- Go to the home scene\n         -- https://docs.coronalabs.com/daily/api/library/composer/gotoScene.html\n         composer.gotoScene( \"scenes.home\", { time = 500, effect = \"crossFade\" } )\n      end\n   end\n   background:addEventListener( \"touch\" )\n\nend\n\n----------------------------------------------------------------------\n-- scene:willShow( event ) - Replaces the scene:show() method.  This\n-- method is called during the \"will\" phase of scene:show().\n----------------------------------------------------------------------\nfunction scene:willShow( event )\n   local sceneGroup = self.view\n\nend\n\n----------------------------------------------------------------------\n-- scene:didShow( event ) - Replaces the scene:show() method.  This\n-- method is called during the \"did\" phase of scene:show().\n----------------------------------------------------------------------\nfunction scene:didShow( event )\n   local sceneGroup = self.view\n\nend\n\n----------------------------------------------------------------------\n-- scene:willHide( event ) - Replaces the scene:hide() method.  This\n-- method is called during the \"will\" phase of scene:hide().\n----------------------------------------------------------------------\nfunction scene:willHide( event )\n   local sceneGroup = self.view\n\nend\n\n----------------------------------------------------------------------\n-- scene:didHide( event ) - Replaces the scene:hide() method.  This\n-- method is called during the \"did\" phase of scene:hide().\n----------------------------------------------------------------------\nfunction scene:didHide( event )\n   local sceneGroup = self.view\n\nend\n\n----------------------------------------------------------------------\n-- scene:destroy( event ) - Called automatically by Composer scene library\n-- to destroy the contents of the scene (based on settings and memory constraints):\n-- https://docs.coronalabs.com/daily/api/library/composer/recycleOnSceneChange.html\n--\n-- Also called if you manually call composer.removeScene()\n-- https://docs.coronalabs.com/daily/api/library/composer/removeScene.html\n----------------------------------------------------------------------\nfunction scene:destroy( event )\n   local sceneGroup = self.view\n\nend\n\n----------------------------------------------------------------------\n--\t\t\t\tCustom Scene Functions/Methods\n----------------------------------------------------------------------\n\n---------------------------------------------------------------------------------\n-- Scene Dispatch Events, Etc. - Generally Do Not Touch Below This Line\n---------------------------------------------------------------------------------\n\n-- This code splits the \"show\" event into two separate events: willShow and didShow\n-- for ease of coding above.\nfunction scene:show( event )\n   local sceneGroup \t= self.view\n   local willDid \t= event.phase\n   if( willDid == \"will\" ) then\n      self:willShow( event )\n   elseif( willDid == \"did\" ) then\n      self:didShow( event )\n   end\nend\n\n-- This code splits the \"hide\" event into two separate events: willHide and didHide\n-- for ease of coding above.\nfunction scene:hide( event )\n   local sceneGroup \t= self.view\n   local willDid \t= event.phase\n   if( willDid == \"will\" ) then\n      self:willHide( event )\n   elseif( willDid == \"did\" ) then\n      self:didHide( event )\n   end\nend\nscene:addEventListener( \"create\", scene )\nscene:addEventListener( \"show\", scene )\nscene:addEventListener( \"hide\", scene )\nscene:addEventListener( \"destroy\", scene )\n---------------------------------------------------------------------------------\nreturn scene"}},"name":"ImprovedComposer","images":[]}}