{"admob_helpers":{"sounds":[],"source":{"scripts":{"admob_helpers.lua":"-- =============================================================\n-- AdMob Helpers Module - Generated by EAT Lean/Fat\n-- EAT Lean - https://gumroad.com/l/eatlean\n-- EAT Fat  - https://gumroad.com/l/EATFrameOneTime\n-- =============================================================\n-- admob_helpers.lua\n-- =============================================================\n--[[\n\n   Includes these functions:\n\n   admob_helpers.setID( os, adType, id ) - Set an id manually (do before init if at all).\n   admob_helpers.init( [delay] ) - Initialize ads with optional delay.\n   admob_helpers.showBanner( [ position [, targetingOptions ] ] ) - Show banner ad.\n   admob_helpers.showInterstitial( [ targetingOptions ] ) - Show interstitial ad.\n   admob_helpers.hide( ) - Hide any showing adMob ad.\n   admob_helpers.loadInterstitial( ) - Load an interstitial ad in preparation to show it.\n   admob_helpers.isInterstitialLoaded( ) - Returns 'true' if interstitial is loaded.\n   admob_helpers.bannerHeight( ) - Get height of (shown) banner ad.\n\n--]]\n-- =============================================================\nlocal onSimulator    = ( system.getInfo( \"environment\" ) == \"simulator\" )\nlocal oniOS          = ( system.getInfo(\"platformName\") == \"iPhone OS\" )\nlocal onAndroid      = ( system.getInfo(\"platformName\") == \"Android\" )\nlocal onWinPhone     = ( system.getInfo(\"platformName\") == \"WinPhone\" )\nlocal onOSX          = ( system.getInfo(\"platformName\") == \"Mac OS X\" )\nlocal onAppleTV      = ( system.getInfo(\"platformName\") == \"tvOS\" )\nlocal onAndroidTV    = ( (system.getInfo(\"androidDisplayDensityName\") == \"tvdpi\") or\n                         (tostring(system.getInfo(\"androidDisplayApproximateDpi\")) == \"213\" ) )\nlocal onWin          = ( system.getInfo(\"platformName\") == \"Win\" )\nlocal onNook         = ( system.getInfo(\"targetAppStore\") == \"nook\" )\nlocal onAmazon       = ( system.getInfo(\"targetAppStore\") == \"amazon\" or\n                         ( string.find( system.getInfo(\"model\"), \"Fire\" ) ~= nil ) )\nlocal onDesktop      = ( ( onOSX or onWin ) and not onSimulator )\nlocal onDevice       = ( onAndroid or oniOS or onAppleTVOS or onAndroidTV  )\n-- =============================================================\n-- =============================================================\nlocal ads = require( \"ads\" )\n\n-- ** IMPORTANT  IMPORTANT  IMPORTANT  IMPORTANT  IMPORTANT  IMPORTANT **\n--\n-- You must change this to 'false' before submitting your app to the store, but\n-- you must leave it as 'true' while testing or you may get your account cancelled.\n--\n-- ** IMPORTANT  IMPORTANT  IMPORTANT  IMPORTANT  IMPORTANT  IMPORTANT **\nlocal isTestMode = true\n\nlocal admob_helpers = {}\n\n-- ==\n--    Table of ids, separated by OS and type (banner or interstitial)\n-- ==\nlocal ids = \n{ \n   android = \n   { \n      banner         = ANDROID_BANNER_ID, \n      interstitial   = ANDROID_INTERSTITIAL_ID\n   },\n   ios = \n   { \n      banner         = IOS_BANNER_ID, \n      interstitial   = IOS_INTERSTITIAL_ID\n   },\n}\n\n-- ==\n--    Example AdMob Listener \n-- ==\nlocal function listener( event ) \n   -- Extract base set of useful event details:\n   local isError     = (event.isError == nil) and false or event.isError\n   local name        = (event.name == nil) and \"unknown\" or event.name\n   local phase       = (event.phase == nil) and \"unknown\" or event.phase\n   local provider    = (event.provider == nil) and \"unknown\" or event.provider\n\n   print(\"AdMob Listener Event @ \", system.getTimer )\n   print('isError: ' .. tostring( isError ) .. '; name == \"' .. tostring(name) .. '\"; phase == \"' .. tostring(phase) .. '\"' )\n\n   -- Do something with the above details...\n   --\n   if( isError ) then\n      print( \"AdMob is getting errors.\")\n      for k,v in pairs( event ) do\n         print(k,v)\n      end\n   \n   else\n      if( name == \"adsRequest\" ) then\n\n         -- Tip: These are checked for in the typical order they happen:\n         --\n         if( phase == \"loaded\" ) then\n            print(\"We got an ad!  We should be ready to show it.\")\n         \n\n         elseif( phase == \"shown\" ) then\n            print(\"Ad started showing!\")\n   \n         elseif( phase == \"refreshed\" ) then\n            print(\"Ad refreshed!\")\n   \n         end\n\n      else        \n         print( \"Admob is getting a weird event.name value?! ==> \" .. tostring( event.response ) )\n         for k,v in pairs( event ) do\n            print(k,v)\n         end\n      end\n   end\nend\n\n-- =============================================================\n-- setID( os, adType, id ) - Set an id for a specific OS and ad type\n--\n-- os - 'android' or 'ios'\n-- adType - 'banner' or 'interstitial'\n-- id - Must be a valid ID\n--\n-- =============================================================\nfunction admob_helpers.setID( os, adType, id )\n   ids[os][adType] = id\nend\n\n\n-- =============================================================\n-- init( [ delay ] ) - Initilize adMob ad network.\n--                     If delay is specified, wait 'delay' ms then\n--                     initialize.\n--\n-- https://docs.coronalabs.com/daily/plugin/ads-admob-v2/index.html\n-- =============================================================\nfunction admob_helpers.init( delay )\n   -- Set default delay if not provided\n   delay = delay or 0 \n   \n   -- A function that we may call immediately or with a delay\n   -- to do the initialization work.\n   local function doInit()\n\n      -- If on Android,\n      if( onAndroid ) then\n         \n         -- and a interstial ID was provided, then init with it\n         if( ids.android.interstitial ) then\n            ads.init( \"admob\", ids.android.interstitial, listener )            \n\n         -- otherwise see if a banner id was supplied and init with it\n         elseif( ids.android.banner ) then\n            ads.init( \"admob\", ids.android.banner, listener )\n\n         end\n\n      -- else if on iOS,\n      elseif( oniOS ) then \n\n         -- and a interstial ID was provided, then init with it\n         if( ids.ios.interstitial ) then\n            ads.init( \"admob\", ids.ios.interstitial, listener )            \n\n         -- otherwise see if a banner id was supplied and init with it\n         elseif( ids.ios.banner )  then\n            ads.init( \"admob\", ids.ios.banner, listener )\n         end\n      end\n\n   end\n\n   -- Initialize immediately or wait a little while?\n   --\n   if( delay < 1 ) then\n      doInit()\n   else\n      timer.performWithDelay( delay, doInit )\n   end\n\nend\n\n-- =============================================================\n-- showBanner() -- Show a banner if we can.\n--\n-- https://docs.coronalabs.com/daily/plugin/ads-admob-v2/show.html\n-- =============================================================\nfunction admob_helpers.showBanner( position, targetingOptions )\n   -- Set default position if not provided\n   position = position or \"top\"\n\n   -- Set targetingOptions to blank table if not provided\n   targetingOptions = targetingOptions or {}\n\n   -- Set provider to admob\n   ads:setCurrentProvider(\"admob\")\n\n   -- Configure the banner ad parameters\n   local xPos, yPos\n   local params\n   if( position == \"top\" ) then\n      xPos, yPos = display.screenOriginX, display.contentCenterY - display.actualContentHeight/2\n   else\n      xPos, yPos = display.screenOriginX, display.contentCenterY + display.actualContentHeight/2\n   end\n\n   if( onAndroid ) then\n      params = \n      { \n         x = xPos, \n         y = yPos, \n         appId = ids.android.banner, \n         targetingOptions = targetingOptions, \n         testMode = isTestMode \n      }\n\n   elseif( oniOS ) then \n      params = \n      { \n         x = xPos, \n         y = yPos, \n         appId = ids.ios.banner, \n         targetingOptions = targetingOptions, \n         testMode = isTestMode \n      }\n   end\n\n   ads.show( \"banner\", params )\nend\n\n-- =============================================================\n-- showInterstitial() -- Show an interstitial if we can.\n--\n-- https://docs.coronalabs.com/daily/plugin/ads-admob-v2/show.html\n-- =============================================================\nfunction admob_helpers.showInterstitial( targetingOptions )\n\n   -- Set targetingOptions to blank table if not provided\n   targetingOptions = targetingOptions or {}\n\n   -- Set provider to admob\n   ads:setCurrentProvider(\"admob\")\n\n   -- Configure the interstitial ad parameters\n   local params\n\n   if( onAndroid ) then\n      params = \n      { \n         appId = ids.android.interstitial, \n         targetingOptions = targetingOptions, \n         testMode = isTestMode \n      }\n\n   elseif( oniOS ) then \n      params = \n      { \n         appId = ids.ios.interstitial, \n         targetingOptions = targetingOptions, \n         testMode = isTestMode \n      }\n   end\n\n   ads.show( \"interstitial\", params )\nend\n\n\n-- =============================================================\n-- loadInterstitial() -- Show an interstitial if we can.\n--\n-- https://docs.coronalabs.com/daily/plugin/ads-admob-v2/load.html\n-- =============================================================\nfunction admob_helpers.loadInterstitial( )\n   -- Set provider to admob\n   ads:setCurrentProvider(\"admob\")\n\n   -- Configure the interstitial ad parameters\n   local params\n\n   if( onAndroid ) then\n      params = \n      { \n         appId = ids.android.interstitial, \n         testMode = isTestMode \n      }\n\n   elseif( oniOS ) then \n      params = \n      { \n         appId = ids.ios.interstitial, \n         testMode = isTestMode \n      }\n   end\n\n   ads.load( \"interstitial\", params )\nend\n\n\n-- =============================================================\n-- isInterstitialLoaded() -- Checks if an interstitial is loaded\n--\n-- https://docs.coronalabs.com/daily/plugin/ads-admob-v2/isLoaded.html\n-- =============================================================\nfunction admob_helpers.isInterstitialLoaded( )\n   -- Set provider to admob\n   ads:setCurrentProvider(\"admob\")\n\n   return ads.isLoaded( \"interstitial\" ) \nend\n\n\n-- =============================================================\n-- bannerHeight() -- Returns height of (shown) banner ad.\n--\n-- https://docs.coronalabs.com/daily/plugin/ads-admob-v2/height.html\n-- =============================================================\nfunction admob_helpers.bannerHeight( )\n   -- Set provider to admob\n   ads:setCurrentProvider(\"admob\")\n\n   return ads.height()\nend\n\n\n-- =============================================================\n-- hide() -- Hide ads.\n--\n-- https://docs.coronalabs.com/daily/plugin/ads-admob-v2/index.html\n-- =============================================================\nfunction admob_helpers.hide( )\n   -- Set provider to admob\n   ads:setCurrentProvider(\"admob\")\n\n   return ads.hide()\nend\n\n\n\nreturn admob_helpers"}},"name":"admob_helpers","images":[]}}