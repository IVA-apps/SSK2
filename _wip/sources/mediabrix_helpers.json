{"mediabrix_helpers":{"sounds":[],"source":{"scripts":{"mediabrix_helpers.lua":"-- =============================================================\n-- mediaBrix Helpers Module - Generated by EAT Lean/Fat\n-- EAT Lean - https://gumroad.com/l/eatlean\n-- EAT Fat  - https://gumroad.com/l/EATFrameOneTime\n-- =============================================================\n-- mediabrix_helpers.lua\n-- =============================================================\n--[[\n\n   Includes these functions:\n\n   mediabrix_helpers.setID( os, id ) - Set an id manually (do before init if at all).\n   mediabrix_helpers.init( [ delay ] ] ) - Initialize ads with optional delay.  \n\n   mediabrix_helpers.load( params ) - Load an new ad for specific placementID.\n   mediabrix_helpers.show( placementID ] ) - Show ad for specific placementID.\n   mediabrix_helpers.isLoaded() - Returns true if ad is loaded for specific placementID.\n\n--]]\n-- =============================================================\nlocal onSimulator    = ( system.getInfo( \"environment\" ) == \"simulator\" )\nlocal oniOS          = ( system.getInfo(\"platformName\") == \"iPhone OS\" )\nlocal onAndroid      = ( system.getInfo(\"platformName\") == \"Android\" )\nlocal onWinPhone     = ( system.getInfo(\"platformName\") == \"WinPhone\" )\nlocal onOSX          = ( system.getInfo(\"platformName\") == \"Mac OS X\" )\nlocal onAppleTV      = ( system.getInfo(\"platformName\") == \"tvOS\" )\nlocal onAndroidTV    = ( (system.getInfo(\"androidDisplayDensityName\") == \"tvdpi\") or\n                         (tostring(system.getInfo(\"androidDisplayApproximateDpi\")) == \"213\" ) )\nlocal onWin          = ( system.getInfo(\"platformName\") == \"Win\" )\nlocal onNook         = ( system.getInfo(\"targetAppStore\") == \"nook\" )\nlocal onAmazon       = ( system.getInfo(\"targetAppStore\") == \"amazon\" or\n                         ( string.find( system.getInfo(\"model\"), \"Fire\" ) ~= nil ) )\nlocal onDesktop      = ( ( onOSX or onWin ) and not onSimulator )\nlocal onDevice       = ( onAndroid or oniOS or onAppleTVOS or onAndroidTV  )\n-- =============================================================\n-- =============================================================\nlocal mediaBrix = require( \"plugin.mediaBrix\" )\n\nlocal lastID -- Set 'on show' to simplify call to hide\n\nlocal mediabrix_helpers = {}\n\n-- ==\n--    Table of ids, separated by OS and type (banner or interstitial)\n-- ==\nlocal ids = \n{ \n   android = ANDROID_ID,\n   ios     = IOS_ID\n}\n\n-- ==\n--    Example mediaBrix Listener \n-- ==\nlocal function listener( event ) \n   -- Extract base set of useful event details:\n   local isError     = (event.isError == nil) and false or event.isError\n   local phase       = (event.phase == nil) and \"unknown\" or event.phase   \n   local eType       = (event.type == nil) and \"unknown\" or event.type   \n   local response    = (event.name == nil) and \"unknown\" or event.response\n\n   print(\"mediaBrix Listener Event @ \", system.getTimer )\n   print('isError: ' .. tostring( isError ) .. '; phase == \"' .. tostring(phase) .. '\"; response == \"' .. tostring(response) .. '\"' )\n\n   -- Do something with the above details...\n   --\n   if( isError ) then\n      print( \"mediaBrix is getting errors.\")\n      for k,v in pairs( event ) do\n         print(k,v)\n      end\n   \n   else\n      -- Note: There may be more phases.\n      if( phase == \"init\" ) then\n      elseif( phase == \"loaded\" ) then\n      elseif( phase == \"failed\" ) then\n      elseif( phase == \"displayed\" ) then\n      elseif( phase == \"closed\" ) then\n      else        \n         print( \"mediaBrix is getting a weird event.phase value?! ==> \" .. tostring( event.phase ) )\n         for k,v in pairs( event ) do\n            print(k,v)\n         end\n      end\n   end\nend\n\n-- =============================================================\n-- setID( os, id ) - Set an id for a specific OS \n--\n-- os - 'android' or 'ios'\n-- id - Must be a valid ID\n--\n-- =============================================================\nfunction mediabrix_helpers.setID( os, id )\n   ids[os] = id\nend\n\n-- =============================================================\n-- init( [ delay ] ) - Initilize revMob ad network.\n--   If delay is specified, wait 'delay' ms then initialize.\n--\n-- https://docs.coronalabs.com/daily/plugin/mediaBrix/init.html\n-- =============================================================\nfunction mediabrix_helpers.init( delay )\n   -- Set default delay if not provided\n   delay = delay or 0 \n   \n   -- A function that we may call immediately or with a delay\n   -- to do the initialization work.\n   local function doInit()\n\n      -- If on Android,\n      if( onAndroid and ids.android ) then\n         mediaBrix.init( listener, { appId = ids.android } )\n\n      -- else if on iOS,\n      elseif( oniOS and ids.ios ) then\n         mediaBrix.init( listener, { appId = ids.ios } )\n\n      end\n\n   end\n\n   -- Initialize immediately or wait a little while?\n   --\n   if( delay < 1 ) then\n      doInit()\n   else\n      timer.performWithDelay( delay, doInit )\n   end\n\nend\n\n-- =============================================================\n-- load( placementID ) -- Load an ad for a specific placementID.\n--\n-- https://docs.coronalabs.com/daily/plugin/mediaBrix/load.html\n-- =============================================================\nfunction mediabrix_helpers.load( placementID )\n   mediaBrix.load( placementID )\nend\n\n-- =============================================================\n-- show( placementID ) -- Show an ad for a specific placementID.\n--\n-- https://docs.coronalabs.com/daily/plugin/mediaBrix/show.html\n-- =============================================================\nfunction mediabrix_helpers.show( placementID )\n   mediaBrix.show( placementID )\nend\n\n-- =============================================================\n-- isLoaded( placementID ) -- Returns true if an ad for a specific placementID is loaded.\n--\n-- https://docs.coronalabs.com/daily/plugin/mediaBrix/isLoaded.html\n-- =============================================================\nfunction mediabrix_helpers.isLoaded( placementID )\n   return mediaBrix.isLoaded( placementID ) or false\nend\n\n\nreturn mediabrix_helpers"}},"name":"mediabrix_helpers","images":[]}}